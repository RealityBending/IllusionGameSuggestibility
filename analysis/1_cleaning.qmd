---
title: "IllusionGameSuggestibility - Data Cleaning"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
    toc: true
---

## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
```


```{r}
#| code-fold: false

dfsub <- read.csv("../data/rawdata_participants.csv")
df <- read.csv("../data/rawdata_IllusionGame.csv") |> 
  group_by(Illusion_Type) |> 
  mutate(Illusion_Effect = ifelse(sign(Illusion_Strength) > 0, "Incongruent", "Congruent"),
         Task_Difficulty = abs(Illusion_Difference),
         Condition_Illusion = datawizard::categorize(
           Illusion_Strength, split="quantile", n_groups=4,
           labels=c("Congruent - Strong", "Congruent - Mild", "Incongruent - Mild", "Incongruent - Strong")),
         Condition_Difficulty = datawizard::categorize(Task_Difficulty, split="quantile", n_groups=2, labels=c("Hard", "Easy"))) |> 
  ungroup()
```

The initial sample consisted of `r report::report_participants(dfsub, age="Age", gender="Gender", education="Education")`.


Total number of observations: `r nrow(df)`.

### Score Computation

```{r}
# MIST
desired_col_order <- c(
    "MIST_Real_A_1",
    "MIST_Real_A_2",
    "MIST_Real_A_3",
    "MIST_Real_A_4",
    "MIST_Real_A_5",
    "MIST_Real_B_6",
    "MIST_Real_B_7",
    "MIST_Real_B_8",
    "MIST_Fake_C_9",
    "MIST_Fake_C_10",
    "MIST_Fake_C_11",
    "MIST_Fake_C_12",
    "MIST_Fake_C_13",
    "MIST_Fake_D_14",
    "MIST_Fake_D_15",
    "MIST_Fake_D_16")    
dfsub <- dfsub %>%
  relocate(desired_col_order, .after = last_col())

#real <- dfsub[,88:95]
#fake <- dfsub[,86:103]

for (col_name in colnames(dfsub[, 88:95])) {
  new_col_name <- paste("correct", col_name, sep = "_")
  dfsub[, new_col_name] <- dfsub[, col_name]
}

for (col_name in colnames(dfsub[, 96:103])) {
  new_col_name <- paste("correct", col_name, sep = "_")
  dfsub[, new_col_name] <- 1 - dfsub[, col_name]
}

dfsub$Veracity_Discernment <- rowSums(dfsub[, 104:119]) 

dfsub$Real_News_Detection <- rowSums(dfsub[, 104:111]) 

dfsub$Fake_News_Detection <- rowSums(dfsub[, 112:119]) 


reversed_for_distrust <- dfsub[, 88:103]
for (x in colnames(reversed_for_distrust)) {
  reversed_for_distrust[, x] <- 1 - reversed_for_distrust[, x]
}

dfsub$Distrust <- rowSums(reversed_for_distrust) - 8
dfsub$Distrust <- ifelse(dfsub$Distrust < 0, 0, dfsub$Distrust)
  
dfsub$Naïvité <- rowSums(dfsub[, 88:103]) - 8
dfsub$Naïvité <- ifelse(dfsub$Naïvité < 0, 0, dfsub$Naïvité)


```

### Recruitment History

```{r}
#| message: false

# Consecutive count of participants per day (as area)
dfsub |>
  mutate(Date = as.Date(Date, format = "%d/%m/%Y")) |> 
  group_by(Date, Experimenter) |> 
  summarize(N = n()) |> 
  ungroup() |>
  complete(Date, Experimenter, fill = list(N = 0)) |> 
  group_by(Experimenter) |>
  mutate(N = cumsum(N)) |>
  ggplot(aes(x = Date, y = N)) +
  geom_area(aes(fill=Experimenter)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(
    title = "Recruitment History",
    x = "Date",
    y = "Total Number of Participants"
  ) +
  see::theme_modern()
```

### Experiment Duration


```{r}
dfsub |>
  mutate(Participant = fct_reorder(Participant, Experiment_Duration),
         Category = ifelse(Experiment_Duration > 50, "extra", "ok"),
         Duration = ifelse(Experiment_Duration > 50, 50, Experiment_Duration)) |>
  ggplot(aes(y = Participant, x = Duration)) +
  geom_point(aes(color = Category, shape = Category)) +
  geom_vline(xintercept = median(dfsub$Experiment_Duration), color = "red", linetype = "dashed") +
  scale_shape_manual(values = c("extra" = 3, ok = 19)) +
  scale_color_manual(values = c("extra" = "red", ok = "black")) +
  guides(color = "none", shape = "none") +
  ggside::geom_xsidedensity(fill = "grey", color=NA) +
  ggside::scale_xsidey_continuous(expand = c(0, 0)) +
  labs(
    title = "Experiment Completion Time",
    x = "Duration (in minutes)",
    y = "Participant"
  )  +
  see::theme_modern() +
  ggside::theme_ggside_void() +
  theme(ggside.panel.scale = .3) 
```


## Exclusion

```{r}
outliers <- c()
```



### Reaction Time (Blocks)

```{r}
#| fig-width: 15
#| fig-height: 15

errorrate <- df |>
  group_by(Participant, Illusion_Type, Block) |>
  summarize(ErrorRate_per_block = sum(Error) / n()) |>
  ungroup() |>
  arrange(desc(ErrorRate_per_block))

plot_distribution <- function(df) {
  d_all <- estimate_density(df, select = "RT")
  
  data_error <- errorrate |>
    group_by(Participant, Block) |>
    summarize(y = mean(ErrorRate_per_block), .groups="drop") |>
    mutate(x = ifelse(Block == "A", 2.1, 2.3),
           color = case_when(
              Participant %in% outliers ~ "red",
              TRUE ~ "blue"
            ))
  
  df |>
    estimate_density(select = "RT", at = c("Participant", "Block")) |>
    group_by(Participant) |>
    normalize(select = "y") |>
    ungroup() |>
    mutate(
      Participant = fct_relevel(Participant, sort(unique(df$Participant))),
      color = case_when(
        Participant %in% outliers ~ "red",
        TRUE ~ "blue"
      )
    ) |>
    ggplot(aes(x = x, y = y)) +
    geom_bar(data = data_error, aes(fill = color), stat = "identity", width=0.19) +
    geom_segment(aes(x = 2, xend = 2.4, y = 0.5, yend = 0.5), color = "black", linetype="dashed", linewidth = 0.5) +
    geom_area(data = normalize(d_all, select = "y"), alpha = 0.2) +
    geom_line(aes(color = color, group = interaction(Participant, Block), linetype = Block), linewidth = 0.5) +
    # geom_vline(xintercept = 0.125, linetype = "dashed", color = "red", size = 0.5) +
    scale_color_manual(values = c("red" = "#F44336", "orange" = "#FF9800", "blue" = "blue"), guide = "none") +
    scale_fill_manual(values = c("red" = "#F44336", "orange" = "#FF9800", "blue" = "blue"), guide = "none") +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    coord_cartesian(xlim = c(0, 2.4)) +
    theme_modern() +
    theme(axis.text.y = element_blank(),
          axis.line.y = element_blank(),
          strip.text.y = element_text(size = rel(0.6))) +
    facet_wrap(~Participant) +
    labs(y = "", x = "Reaction Time (s)")
}

plot_distribution(df)
```

### Error Rate (Blocks)

For each block, we computed the error rate and, if more than 50%, we discarded the whole block (as it likely indicates that instructions got mixed up, for instance participants were selecting the smaller instead of the bigger circle).

```{r p_outliers_errorblock, message=FALSE, warning=FALSE}
errorrate |>
  estimate_density(at = c("Illusion_Type", "Block"), method = "KernSmooth") |>
  ggplot(aes(x = x, y = y)) +
  geom_line(aes(color = Illusion_Type, linetype = Block)) +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_color_manual(values = c("Ebbinghaus" = "#2196F3", "MullerLyer" = "#4CAF50", "VerticalHorizontal" = "#FF5722")) +
  labs(y = "Distribution", x = "Error Rate") +
  theme_modern() 

remove_badblocks <- function(df) {
  n <- nrow(df)
  df <- df |>
    group_by(Participant, Illusion_Type, Block) |>
    mutate(ErrorRate_per_block = sum(Error) / n()) |>
    ungroup() |>
    filter(ErrorRate_per_block < 0.5) |>
    select(-ErrorRate_per_block)
  
  text <- paste0(
    "We removed ",
    n - nrow(df),
    " (",
    insight::format_value((n - nrow(df)) / n, as_percent = TRUE),
    ") trials belonging to bad blocks."
  )
  list(data = df, text = text)
}

out <- remove_badblocks(df)
print(paste("Illusion (session 1):", out$text))
df <- out$data
```




## Final Sample

```{r}
dfsub <- filter(dfsub, !Participant %in% outliers)
df <- filter(df, Participant %in% dfsub$Participant)
```

### Age

```{r}
p_age <- estimate_density(dfsub$Age) |>
  normalize(select = y) |> 
  mutate(y = y * 86) |>  # To match the binwidth
  ggplot(aes(x = x)) +
  geom_histogram(data=dfsub, aes(x = Age, fill=Gender), bins=28) +
  # geom_line(aes(y = y), color = "orange", linewidth=2) +
  geom_vline(xintercept = mean(dfsub$Age), color = "red", linewidth=1.5) +
  # geom_label(data = data.frame(x = mean(df$Age) * 1.15, y = 0.95 * 75), aes(y = y), color = "red", label = paste0("Mean = ", format_value(mean(df$Age)))) +
  scale_fill_manual(values = c("Male"= "#64B5F6", "Female"= "#F06292")) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Age", y = "Number of Participants", color = NULL, subtitle = "Distribution of participants' age") +
  theme_modern(axis.title.space = 10) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_age
```


<!-- ## Ethnicity -->

<!-- ```{r p_demographics_ethnicity} -->
<!-- plot_waffle <- function(sub, what = "Nationality", title = what, rows = 8, size = 3) { -->
<!--   ggwaffle::waffle_iron(sub, what, rows = rows) |> -->
<!--     ggplot(aes(x, y)) + -->
<!--     geom_point(aes(color = group), shape = "square", size = size) + -->
<!--     coord_equal() + -->
<!--     ggtitle(title) + -->
<!--     labs(fill = "", color = "", subtitle = "N participants per self-declared group") + # (each square represents one participant)" -->
<!--     theme_void() + -->
<!--     theme( -->
<!--       plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0), -->
<!--       plot.subtitle = element_text(size = rel(1.2)), -->
<!--       legend.key.height = unit(1, "mm"), -->
<!--       legend.key.width = unit(1, "mm") -->
<!--     ) -->
<!-- } -->

<!-- p_ethni <- plot_waffle(sub, "Ethnicity", rows = 20, size = 8) + -->
<!--   scale_color_manual(values = c("Hispanic" = "#FF5722", "Caucasian" = "#2196F3", "African" = "#4CAF50", "Asian" = "#FFC107", "Other" = "#795548")) -->
<!-- p_ethni -->
<!-- ``` -->


### Education

```{r}
p_edu <- dfsub |>
  mutate(Education = fct_relevel(Education, "Other", "High School", "Bachelor", "Master", "Doctorate")) |> 
  ggplot(aes(x = Education)) +
  geom_bar(aes(fill = Education)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Education", y = "Number of Participants", subtitle = "Participants per achieved education level") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
    axis.title.x = element_blank()
  )
p_edu
```



### Summary

The final sample includes `r report::report_participants(df, age="Age", sex="Sex", education="Education")`.

```{r p_summary}
#| fig-width: 15
#| fig-height: 15

p_age + p_edu
```

## Save 

```{r}
#| code-fold: false

write.csv(dfsub, "../data/data_participants.csv", row.names = FALSE)
write.csv(df, "../data/data_IllusionGame.csv", row.names = FALSE)
```
